--Create Brands
CREATE TABLE BRANDS 
(
  ID NUMBER(*, 0) NOT NULL 
, NAME NVARCHAR2(45) NOT NULL 
, DESCRIPTION NVARCHAR2(200) 
, CONSTRAINT BRANDS_PK PRIMARY KEY 
  (
    ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX BRANDS_PK ON BRANDS (ID ASC) 
      LOGGING 
      TABLESPACE "SONOWEB_DATA" 
      PCTFREE 10 
      INITRANS 2 
      STORAGE 
      ( 
        INITIAL 65536 
        NEXT 65536 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        PCTINCREASE 0 
        BUFFER_POOL DEFAULT 
      ) 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE "SONOWEB_DATA" 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 65536 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  PCTINCREASE 0 
  BUFFER_POOL DEFAULT 
);

ALTER TABLE BRANDS
ADD CONSTRAINT BRANDS_UK1 UNIQUE 
(
  NAME 
)
USING INDEX 
(
    CREATE UNIQUE INDEX BRANDS_UK1 ON BRANDS (NAME ASC) 
    LOGGING 
    TABLESPACE "SONOWEB_DATA" 
    PCTFREE 10 
    INITRANS 2 
    STORAGE 
    ( 
      INITIAL 65536 
      NEXT 65536 
      MINEXTENTS 1 
      MAXEXTENTS UNLIMITED 
      PCTINCREASE 0 
      BUFFER_POOL DEFAULT 
    ) 
)
 ENABLE;
 
 CREATE SEQUENCE BRANDS_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20;
 
CREATE TRIGGER BRANDS_TRG 
BEFORE INSERT ON BRANDS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.ID IS NULL THEN
      SELECT BRANDS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--Create GoodTypes
CREATE TABLE GOODTYPES 
(
  ID NUMBER(*, 0) NOT NULL 
, NAME NVARCHAR2(45) NOT NULL 
, CONSTRAINT GOODTYPES_PK PRIMARY KEY 
  (
    ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX GOODTYPES_PK ON GOODTYPES (ID ASC) 
      LOGGING 
      TABLESPACE "SONOWEB_DATA" 
      PCTFREE 10 
      INITRANS 2 
      STORAGE 
      ( 
        INITIAL 65536 
        NEXT 65536 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        PCTINCREASE 0 
        BUFFER_POOL DEFAULT 
      ) 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE "SONOWEB_DATA" 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 65536 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  PCTINCREASE 0 
  BUFFER_POOL DEFAULT 
);

ALTER TABLE GOODTYPES
ADD CONSTRAINT GOODTYPES_UK1 UNIQUE 
(
  NAME 
, ID 
)
USING INDEX 
(
    CREATE UNIQUE INDEX GOODTYPES_UK1 ON GOODTYPES (NAME ASC, ID ASC) 
    LOGGING 
    TABLESPACE "SONOWEB_DATA" 
    PCTFREE 10 
    INITRANS 2 
    STORAGE 
    ( 
      INITIAL 65536 
      NEXT 65536 
      MINEXTENTS 1 
      MAXEXTENTS UNLIMITED 
      PCTINCREASE 0 
      BUFFER_POOL DEFAULT 
    ) 
)
 ENABLE;

CREATE SEQUENCE GOODTYPES_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20;

CREATE TRIGGER GOODTYPES_TRG 
BEFORE INSERT ON GOODTYPES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.ID IS NULL THEN
      SELECT GOODTYPES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--Create Goods
CREATE TABLE GOODS 
(
  ID NUMBER(*, 0) NOT NULL 
, NAME NVARCHAR2(45) NOT NULL 
, TYPEID NUMBER(*, 0) 
, DESCRIPTION NVARCHAR2(200) 
, PRICE NUMBER(6, 2) 
, BRANDID NUMBER(*, 0) 
, CONSTRAINT GOODS_PK PRIMARY KEY 
  (
    ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX GOODS_PK ON GOODS (ID ASC) 
      LOGGING 
      TABLESPACE "SONOWEB_DATA" 
      PCTFREE 10 
      INITRANS 2 
      STORAGE 
      ( 
        INITIAL 65536 
        NEXT 65536 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        PCTINCREASE 0 
        BUFFER_POOL DEFAULT 
      ) 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE "SONOWEB_DATA" 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 65536 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  PCTINCREASE 0 
  BUFFER_POOL DEFAULT 
);

ALTER TABLE GOODS
ADD CONSTRAINT GOODS_UK1 UNIQUE 
(
  NAME 
)
USING INDEX 
(
    CREATE UNIQUE INDEX GOODS_UK1 ON GOODS (NAME ASC) 
    LOGGING 
    TABLESPACE "SONOWEB_DATA" 
    PCTFREE 10 
    INITRANS 2 
    STORAGE 
    ( 
      INITIAL 65536 
      NEXT 65536 
      MINEXTENTS 1 
      MAXEXTENTS UNLIMITED 
      PCTINCREASE 0 
      BUFFER_POOL DEFAULT 
    ) 
)
 ENABLE;

ALTER TABLE GOODS
ADD CONSTRAINT FK_GOODS_BRANDS FOREIGN KEY
(
  BRANDID 
)
REFERENCES BRANDS
(
  ID 
)
ENABLE;

ALTER TABLE GOODS
ADD CONSTRAINT FK_GOODS_TYPES FOREIGN KEY
(
  TYPEID 
)
REFERENCES GOODTYPES
(
  ID 
)
ENABLE;

CREATE SEQUENCE GOODS_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20;

CREATE TRIGGER GOODS_TRG 
BEFORE INSERT ON GOODS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.ID IS NULL THEN
      SELECT GOODS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--Create Users
CREATE TABLE USERS 
(
  ID NUMBER NOT NULL 
, FIRST_NAME VARCHAR2(40 BYTE) NOT NULL 
, MIDDLE_NAME VARCHAR2(40 BYTE) NOT NULL 
, LAST_NAME VARCHAR2(40 BYTE) NOT NULL 
, DOB DATE NOT NULL 
, TEL VARCHAR2(20 BYTE) 
, EMAIL VARCHAR2(50 BYTE) NOT NULL 
, LOGIN VARCHAR2(20 BYTE) NOT NULL 
, PASS VARCHAR2(50 BYTE) NOT NULL 
, CONSTRAINT SYS_C0019569 PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE "SONOWEB_DATA" 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 65536 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  PCTINCREASE 0 
  BUFFER_POOL DEFAULT 
);

CREATE SEQUENCE USERS_SEQ INCREMENT BY 1 MAXVALUE 9999999999999999999999999999 MINVALUE 1 CACHE 20;

CREATE TRIGGER USERS_TRG 
BEFORE INSERT ON USERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.ID IS NULL THEN
      SELECT USERS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--Create Roles
CREATE TABLE ROLES 
(
  ID NUMBER NOT NULL 
, ROLE VARCHAR2(40 BYTE) NOT NULL 
, CONSTRAINT SYS_C0019572 PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE "SONOWEB_DATA" 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 65536 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  PCTINCREASE 0 
  BUFFER_POOL DEFAULT 
);

ALTER TABLE ROLES
ADD CONSTRAINT ROLE UNIQUE 
(
  ROLE 
)
USING INDEX 
(
    CREATE UNIQUE INDEX ROLE ON ROLES (ROLE ASC) 
    LOGGING 
    TABLESPACE "SONOWEB_DATA" 
    PCTFREE 10 
    INITRANS 2 
    STORAGE 
    ( 
      INITIAL 65536 
      NEXT 65536 
      MINEXTENTS 1 
      MAXEXTENTS UNLIMITED 
      PCTINCREASE 0 
      BUFFER_POOL DEFAULT 
    ) 
)
 ENABLE;

CREATE SEQUENCE ROLES_SEQ INCREMENT BY 1 MAXVALUE 9999999999999999999999 MINVALUE 1 CACHE 20;

CREATE TRIGGER ROLES_TRG 
BEFORE INSERT ON ROLES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.ID IS NULL THEN
      SELECT ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--Create User_Role
CREATE TABLE USER_ROLE 
(
  USER_ID NUMBER NOT NULL 
, ROLE_ID NUMBER NOT NULL 
, ID NUMBER(*, 0) NOT NULL 
, CONSTRAINT USER_ROLE_PK PRIMARY KEY 
  (
    ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX USER_ROLE_PK ON USER_ROLE (ID ASC) 
      LOGGING 
      TABLESPACE "SONOWEB_DATA" 
      PCTFREE 10 
      INITRANS 2 
      STORAGE 
      ( 
        INITIAL 65536 
        NEXT 65536 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        PCTINCREASE 0 
        BUFFER_POOL DEFAULT 
      ) 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE "SONOWEB_DATA" 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 65536 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  PCTINCREASE 0 
  BUFFER_POOL DEFAULT 
);

ALTER TABLE USER_ROLE
ADD CONSTRAINT FK_RID FOREIGN KEY
(
  ROLE_ID 
)
REFERENCES ROLES
(
  ID 
)
ENABLE;

ALTER TABLE USER_ROLE
ADD CONSTRAINT FK_UID FOREIGN KEY
(
  USER_ID 
)
REFERENCES USERS
(
  ID 
)
ENABLE;

CREATE SEQUENCE USER_ROLE_SEQ INCREMENT BY 1 MAXVALUE 99999999999999999999999 MINVALUE 1 CACHE 20;

CREATE TRIGGER USER_ROLE_TRG 
BEFORE INSERT ON USER_ROLE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.ID IS NULL THEN
      SELECT USER_ROLE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--Create Orders
CREATE TABLE ORDERS 
(
  ID NUMBER(*, 0) NOT NULL 
, USERID NUMBER(*, 0) 
, GOODID NUMBER(*, 0) 
, ISPAYED NUMBER(*, 0) 
, CONSTRAINT ORDERS_PK PRIMARY KEY 
  (
    ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX ORDERS_PK ON ORDERS (ID ASC) 
      LOGGING 
      TABLESPACE "SONOWEB_DATA" 
      PCTFREE 10 
      INITRANS 2 
      STORAGE 
      ( 
        INITIAL 65536 
        NEXT 65536 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        PCTINCREASE 0 
        BUFFER_POOL DEFAULT 
      ) 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE "SONOWEB_DATA" 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 65536 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  PCTINCREASE 0 
  BUFFER_POOL DEFAULT 
);

ALTER TABLE ORDERS
ADD CONSTRAINT FK_ORDERS_GOODS FOREIGN KEY
(
  GOODID 
)
REFERENCES GOODS
(
  ID 
)
ENABLE;

ALTER TABLE ORDERS
ADD CONSTRAINT FK_ORDERS_USERS FOREIGN KEY
(
  USERID 
)
REFERENCES USERS
(
  ID 
)
ENABLE;

CREATE SEQUENCE ORDERS_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20;

CREATE TRIGGER ORDERS_TRG 
BEFORE INSERT ON ORDERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.ID IS NULL THEN
      SELECT ORDERS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/


--Create UsersBlackList
CREATE TABLE USERSBLACKLIST 
(
  ID NUMBER(*, 0) NOT NULL 
, USERID NUMBER(*, 0) 
, DESCRIPTION NVARCHAR2(200) 
, CONSTRAINT USERSBLACKLIST_PK PRIMARY KEY 
  (
    ID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX USERSBLACKLIST_PK ON USERSBLACKLIST (ID ASC) 
      LOGGING 
      TABLESPACE "SONOWEB_DATA" 
      PCTFREE 10 
      INITRANS 2 
      STORAGE 
      ( 
        INITIAL 65536 
        NEXT 65536 
        MINEXTENTS 1 
        MAXEXTENTS UNLIMITED 
        PCTINCREASE 0 
        BUFFER_POOL DEFAULT 
      ) 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE "SONOWEB_DATA" 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  INITIAL 65536 
  NEXT 65536 
  MINEXTENTS 1 
  MAXEXTENTS UNLIMITED 
  PCTINCREASE 0 
  BUFFER_POOL DEFAULT 
);

ALTER TABLE USERSBLACKLIST
ADD CONSTRAINT FK_USERSBLACKLIST_USERS FOREIGN KEY
(
  USERID 
)
REFERENCES USERS
(
  ID 
)
ENABLE;

CREATE SEQUENCE USERSBLACKLIST_SEQ INCREMENT BY 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 CACHE 20;

CREATE TRIGGER USERSBLACKLIST_TRG 
BEFORE INSERT ON USERSBLACKLIST 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF :NEW.ID IS NULL THEN
      SELECT USERSBLACKLIST_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/

